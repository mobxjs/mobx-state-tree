{
  "_comment": "This file is auto-generated by write-translations.js",
  "localized-strings": {
    "next": "Next",
    "previous": "Previous",
    "tagline": "Opinionated, transactional, MobX powered state container combining the best features of the immutable and mutable world for an optimal DX",
    "docs": {
      "API_header": {
        "title": "API_header"
      },
      "API/index": {
        "title": "mobx-state-tree - v5.0.0",
        "sidebar_label": "Globals"
      },
      "API/interfaces/customtypeoptions": {
        "title": "CustomTypeOptions",
        "sidebar_label": "CustomTypeOptions"
      },
      "API/interfaces/iactioncontext": {
        "title": "IActionContext",
        "sidebar_label": "IActionContext"
      },
      "API/interfaces/iactionrecorder": {
        "title": "IActionRecorder",
        "sidebar_label": "IActionRecorder"
      },
      "API/interfaces/iactiontrackingmiddleware2call": {
        "title": "IActionTrackingMiddleware2Call",
        "sidebar_label": "IActionTrackingMiddleware2Call"
      },
      "API/interfaces/iactiontrackingmiddleware2hooks": {
        "title": "IActionTrackingMiddleware2Hooks",
        "sidebar_label": "IActionTrackingMiddleware2Hooks"
      },
      "API/interfaces/iactiontrackingmiddlewarehooks": {
        "title": "IActionTrackingMiddlewareHooks",
        "sidebar_label": "IActionTrackingMiddlewareHooks"
      },
      "API/interfaces/ianycomplextype": {
        "title": "IAnyComplexType",
        "sidebar_label": "IAnyComplexType"
      },
      "API/interfaces/ianymodeltype": {
        "title": "IAnyModelType",
        "sidebar_label": "IAnyModelType"
      },
      "API/interfaces/ianytype": {
        "title": "IAnyType",
        "sidebar_label": "IAnyType"
      },
      "API/interfaces/ihooks": {
        "title": "IHooks",
        "sidebar_label": "IHooks"
      },
      "API/interfaces/ijsonpatch": {
        "title": "IJsonPatch",
        "sidebar_label": "IJsonPatch"
      },
      "API/interfaces/imiddlewareevent": {
        "title": "IMiddlewareEvent",
        "sidebar_label": "IMiddlewareEvent"
      },
      "API/interfaces/imodelreflectiondata": {
        "title": "IModelReflectionData",
        "sidebar_label": "IModelReflectionData"
      },
      "API/interfaces/imodelreflectionpropertiesdata": {
        "title": "IModelReflectionPropertiesData",
        "sidebar_label": "IModelReflectionPropertiesData"
      },
      "API/interfaces/imodeltype": {
        "title": "IModelType",
        "sidebar_label": "IModelType"
      },
      "API/interfaces/ipatchrecorder": {
        "title": "IPatchRecorder",
        "sidebar_label": "IPatchRecorder"
      },
      "API/interfaces/ireversiblejsonpatch": {
        "title": "IReversibleJsonPatch",
        "sidebar_label": "IReversibleJsonPatch"
      },
      "API/interfaces/iserializedactioncall": {
        "title": "ISerializedActionCall",
        "sidebar_label": "ISerializedActionCall"
      },
      "API/interfaces/isimpletype": {
        "title": "ISimpleType",
        "sidebar_label": "ISimpleType"
      },
      "API/interfaces/isnapshotprocessor": {
        "title": "ISnapshotProcessor",
        "sidebar_label": "ISnapshotProcessor"
      },
      "API/interfaces/isnapshotprocessors": {
        "title": "ISnapshotProcessors",
        "sidebar_label": "ISnapshotProcessors"
      },
      "API/interfaces/itype": {
        "title": "IType",
        "sidebar_label": "IType"
      },
      "API/interfaces/ivalidationcontextentry": {
        "title": "IValidationContextEntry",
        "sidebar_label": "IValidationContextEntry"
      },
      "API/interfaces/ivalidationerror": {
        "title": "IValidationError",
        "sidebar_label": "IValidationError"
      },
      "API/interfaces/referenceoptionsgetset": {
        "title": "ReferenceOptionsGetSet",
        "sidebar_label": "ReferenceOptionsGetSet"
      },
      "API/interfaces/referenceoptionsoninvalidated": {
        "title": "ReferenceOptionsOnInvalidated",
        "sidebar_label": "ReferenceOptionsOnInvalidated"
      },
      "API/interfaces/unionoptions": {
        "title": "UnionOptions",
        "sidebar_label": "UnionOptions"
      },
      "concepts/actions": {
        "title": "Actions"
      },
      "concepts/async-actions": {
        "title": "Asynchronous actions"
      },
      "concepts/dependency-injection": {
        "title": "Dependency Injection"
      },
      "concepts/listeners": {
        "title": "Listening to observables, snapshots, patches and actions",
        "sidebar_label": "Listening to changes"
      },
      "concepts/middleware": {
        "title": "Middleware"
      },
      "concepts/patches": {
        "title": "Patches"
      },
      "concepts/using-react": {
        "title": "React and MST"
      },
      "concepts/reconciliation": {
        "title": "Reconciliation"
      },
      "concepts/references": {
        "title": "Identifiers and references"
      },
      "concepts/snapshots": {
        "title": "Snapshots"
      },
      "concepts/trees": {
        "title": "Types, models, trees & state"
      },
      "concepts/views": {
        "title": "Derived values"
      },
      "concepts/volatiles": {
        "title": "Volatile state"
      },
      "intro/examples": {
        "title": "Examples"
      },
      "intro/getting-started": {
        "title": "Getting Started Tutorial"
      },
      "intro/installation": {
        "title": "Installation"
      },
      "intro/philosophy": {
        "title": "Overview & Philosophy"
      },
      "overview/hooks": {
        "title": "Lifecycle hooks overview"
      },
      "overview/types": {
        "title": "Types overview"
      },
      "overview/api": {
        "title": "API overview"
      },
      "tips/circular-deps": {
        "title": "Handle circular dependencies between files and types using `late`",
        "sidebar_label": "Circular dependencies"
      },
      "tips/contributing": {
        "title": "Contributing"
      },
      "tips/faq": {
        "title": "Frequently Asked Questions"
      },
      "tips/inheritance": {
        "title": "Simulate inheritance by using type composition",
        "sidebar_label": "Simulating inheritance"
      },
      "tips/more-tips": {
        "title": "Miscellaneous Tips"
      },
      "tips/resources": {
        "title": "Talks & Blogs"
      },
      "tips/snapshots-as-values": {
        "title": "Using snapshots as values"
      },
      "tips/typescript": {
        "title": "TypeScript and MST"
      }
    },
    "links": {
      "Documentation": "Documentation",
      "TypeDocs": "TypeDocs",
      "Sponsor": "Sponsor",
      "GitHub": "GitHub"
    },
    "categories": {
      "Introduction": "Introduction",
      "Basic Concepts": "Basic Concepts",
      "Advanced Concepts": "Advanced Concepts",
      "API Overview": "API Overview",
      "Tips": "Tips",
      "Interfaces": "Interfaces"
    }
  },
  "pages-strings": {
    "Help Translate|recruit community translators for your project": "Help Translate",
    "Edit this Doc|recruitment message asking to edit the doc source": "Edit",
    "Translate this Doc|recruitment message asking to translate the docs": "Translate"
  }
}
